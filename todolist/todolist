#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# todolist.py
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 0AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# Franck Labadille
#

"""
todolist.py return a string with :
deadline ; subject of todo ; details ; (genre?) ;

"""
import pdb

import datetime
import os

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Table, Column, Integer, String, Date, DateTime, Boolean

from optparse import OptionParser



database_location = os.path.join(os.path.expanduser("~") + ".todolist.sql")
Base = declarative_base()
session = None


now = datetime.datetime.now()
today = datetime.datetime.today()
default_genre="any"


class Todo(Base):
    __tablename__ = "todo"
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=now) # datetime data enters in
    deadline = Column(Date, default=today)
    genre = Column(String, default="")
    subject = Column(String, default="")
    detail = Column(String, default="")
    done = Column(Boolean, default=False)

    def __init__(self, data):
        """ data is dictionnary issued by optparsing user entry """
        self.timestamp = now
        self.deadline = data["deadline"]
        self.genre = data["genre"]
        self.subject = data["subject"]
        self.detail = data["detail"]
        self.done = data["done"]

    def __repr__(self):
        return """<Todo('{}','{}','{}','{}','{}','{}')>
                """.format(self.timestamp, self.deadline, self.genre,
                        self.subject, self.detail, self.done)

class DbHandler:

    def __init__(self, database_location):
        self.engine = create_engine("sqlite:///{}".format(database_location),
                                            echo=False, convert_unicode=True)
        Base.metadata.create_all(self.engine)
        Session = sessionmaker(bind=self.engine)
        self.session = Session()


    def db_exist(self):
        """
        locate db, test if correspond with table describe above
        Return False if doesn't
        """
        #TODO ?
        return True

    def create_db(self):
        """Create database with database todolist pattern"""
        #TODO ?
        pass

    def add_entry(self, options):
        """ Receive dictionnary with data to insert into database"""
        self.values["deadline"] = options.deadline
        self.values["genre"] = options.genre.decode("utf_8")
        self.values["subject"] = options.subject.decode("utf_8")
        self.values["detail"] = options.detail.decode("utf_8")
        self.values["done"] = options.done
        try:
           new_entry = Todo(**self.values)
           self.session.add(new_entry)
           self.session.commit()
           return True
        except sqlalchemy.exc.IntegrityError:
            return False

    def update_entry(self, d):
        """ Update database entry """
        #TODO
        pass

    def list_todo(self):
        """ List todo in database """
        #TODO
        pass
    
    def del_entry(self, entry_id):
        """ Tell database entry was done 
            NOT USED
        """
        #TODO ?
        pass

class TodoParser:
    """ Parse userinput """
    def __init__(self):
        parser = OptionParser(usage="%prog" + ".\n")
        parser.add_option("-d", "--deadline",
                            action="store", type="string", dest="deadline",
                            default=today,
                            help="Date of deadline ; format to YYMMDD")
        parser.add_option("-g", "--genre",
                            action="store", type="string", dest="genre",
                            default=default_genre,
                            help="Type of todo entry ; may be book, film, program,\
                            market... whatever !")
        parser.add_option("-s", "--subject",
                            action="store", type="string", dest="subject",
                            help="Resume of the thing to do")
        parser.add_option("-t", "--text", "--detail",
                            action="store", type="string", dest="detail",
                            help="Detailled explication of the thing to do")
        parser.add_option("-i", "--id",
                            action="store", type="integer", dest="id_entry",
                            help="id of entry you want to handle with")
        parser.add_option("-d", "--done",
                            action="store_true", dest="done", default=False,
                            help="use this option if the thing to do was done")
        parser.add_option("-u", "--undone",
                            action="store_false", dest="done", default=True,
                            help="use this option if the thing needs to be done")
        parser.add_option("--database",
                            action="store", type="string", dest="database",
                            help="use alternate database")
        (options,args) = parser.parse_args()
       
        return options, args
 

class EntryParser:
    """
    Parse user input if needed
    """
    def __init__(self, userinput):
        self.ui = userinput

    def checkui(self):
        """ check if userinput is in the right format"""
        pass


if __name__ == "__main__":
    tdl = DbHandler(database_location)  # tdl is "todolist"

    # Test if database exists ; create otherwise.
    todobase = DbHandler(database_location)
    if not todobase.db_exist():
        todobase.create_db()
    pdb.set_trace()

   
    def prepare_to_add():
        #TODO check user input with EntryParser.checkui()
        DbHandler.add_entry(options)


    def add_or_update(options):
        """ Test if we're dealing with new entry or not
            If user want to update entry that doesn't exist, raise exception
            If the user didn't specify id_entry, assume it's new todo to add
        """
        if options["id_entry"]:
            if DbHandler.check_id_exists:
                #TODO
                pass # prepare_to_update()
            raise IdError("Id {} doesn't exist in database"
                        .format(options["id_entry"]))
        prepare_to_add()

    # start prog
    (options, args) = TodoParser()
    if options["list"]:
        #TODO
        pass # DbHandler.list_todo()
    else:
        #TODO 
        add_or_update(options)
