#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# todolist.py
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 0AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# Franck Labadille
#

"""
todolist.py return a string with :
deadline ; subject of todo ; details ; (genre?) ;

"""


import datetime
import os

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Table, Column, Integer, String, Date, DateTime, Boolean


now = datetime.datetime.now()
today = datetime.datetime.today()

database_location = os.path.join("os.path.expanduser("~")" + ".todolist.sql")

Base = declarative_base()

session = None


class Model(Base):
    __tablename__ = "todolist"
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=now) # datetime data enters in
    deadline = Column(Date, default=today)
    genre = Column(String, default="")
    subject = Column(String, default="")
    detail = Column(String, default="")
    done = Column(Boolean, default=False)

    def __init__(self, data):
        """ data is dictionnary issued by optparsing user entry """
        self.id = ""
        self.timestamp = now
        self.deadline = data["deadline"]
        self.genre = data["genre"]
        self.subject = data["subject"]
        self.detail = data["detail"]
        self.done = data["done"]

    def __repr__(self):
        return """<Model('{}','{}','{}','{}','{}','{}','{}')>
                """.format(self.id, self.timestamp, self.deadline, self.genre,
                        self.subject, self.detail, self.done)

class DbHandler:

    def __init__(self, database_location):
        self.engine = create_engine("sqlite:///{}".format(database_location),
                                            echo=False, convert_unicode=True)
        Base.metadata.create_all(self.engine)
        Session = sessionmaker(bind=self.engine)
        self.session = Session()


    def db_exist(self):
        """
        locate db, test if correspond with table describe above
        Return False if doesn't
        """
        return True

    def create_db(self):
        """Create database with database todolist pattern"""
        pass

    def add_entry(self, d):
        """ Receive dictionnary with data to insert into database"""
        try:
           u = Model(d)
           self.session.add(u)
           self.session.commit()
           return True
        except sqlalchemy.exc.IntegrityError:
            return False

    def del_entry(self, entry_id):
        """Tell database entry was done """
        pass

if __name__ = "__main__":

    tdl = DbHandler(database_location)  # tdl is "todolist"

    # Test if database exists ; create otherwise.
    if not Model.db_exist():
        Model.create_db()

    # Parse user input
