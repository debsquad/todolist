#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# todolist.py
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 0AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# Franck Labadille
#

"""
todolist.py return a string with :
deadline ; subject of todo ; details ; (genre?) ;

"""
import pdb

import datetime
import os
import sys

import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Boolean, DateTime
from sqlalchemy import and_

from optparse import OptionParser


Base = declarative_base()


now = datetime.datetime.now()
today = datetime.date.today()
start_of_today = datetime.datetime(int(today.isoformat()[0:4]),
                                    int(today.isoformat()[5:7]),
                                    int(today.isoformat()[8:]),
                                    00,00,1)
end_of_today = datetime.datetime(int(today.isoformat()[0:4]),
                                int(today.isoformat()[5:7]),
                                int(today.isoformat()[8:]),
                                23,59,59)
default_genre = "default"


class Todo(Base):
    __tablename__ = "todo"
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=now) # datetime data enters in
    deadline = Column(DateTime, default=end_of_today)
    genre = Column(String, default="")
    subject = Column(String, default="")
    text = Column(String, default="")
    done = Column(Boolean, default=False)

        
class AddTodoCommand:
    """
        Adding new todo in database
    """
    command_name = "add"

    def run(self, session, options):
        if not options.genre:
            options.genre = default_genre.decode("utf_8")

        values = {
            "deadline": options.deadline,
            "genre": options.genre,
            "subject": options.subject,
            "text": options.text,
            "done": options.done
            }
        try:
            new_entry = Todo(**values)
            session.add(new_entry)
            session.commit()
            return True
        except sqlalchemy.exc.IntegrityError:
            print("Error while adding data")
            return False

class ListTodoCommand:
    """
        Return (or print) the things to do
        Begin with things undone which deadline is passed
        Then order by deadline
        List genre asked ; if None, list all genres
    """
    command_name = "list"
    

    def run(self, session, options):
        query = session.query(Todo)

        # list only todos that are DONE
        if options.done:
            query = query.filter(Todo.done == True)
        else:
            query = query.filter(Todo.done == False)

        # list only todos with a genre
        if options.genre:
            genre = "%{}%".format(options.genre)
            query = query.filter(Todo.genre.ilike(genre))
        
        # list only todos that deadline hasn't passed (default)
        if not options.all_dates:
            # list only today's todos if user wants
            if options.list_today:
                query = query.filter(and_(start_of_today <= Todo.deadline,
                                            Todo.deadline <= end_of_today ))
            else:
                query = query.filter(Todo.deadline > datetime.datetime.now())

        query = query.order_by(Todo.deadline)
        query = query.all()
        for u in query:
            print("{}, {}, {}, {}, {}".format(u.id, u.deadline, 
                                                u.genre.encode("utf_8"),
                                                u.subject.encode("utf_8"),
                                                u.text.encode("utf_8")))


class UpdateTodoCommand:
    command_name = "update"

    def run(self, session, options):
        query = session.query(Todo)
        try:
            to_update = query.filter(Todo.id == options.id_entry).one()
        except sqlalchemy.orm.exc.NoResultFound:
           print("Todo id doesn't exist")
        
        if options.done:
            to_update.done = options.done
        if options.deadline:
            to_update.deadline = options.deadline
        if options.subject:
            to_update.subject = options.subject
        if options.text:
            to_update.text = options.text
        if options.genre:
            to_update.genre = options.genre

        session.commit()


if __name__ == "__main__":


    def parse_args(command_name, args):

        def update_args():
            parser.add_option("-i", "--id",
                                action="store", type="string", dest="id_entry",
                                help="id of entry you want to handle with")

        def add_update_args():
            parser.add_option("-d", "--deadline",
                                action="store", type="string", dest="deadline",
                                default=None,
                                help="Date of deadline ; format to [YY]YYMMDD[-hh[mm[ss]]]")
            parser.add_option("-s", "--subject",
                                action="store", type="string", dest="subject",
                                help="Resume of the thing to do")
            parser.add_option("-t", "--text",
                                action="store", type="string", dest="text",
                                help="Detailled explication of the thing to do")

        def list_args():
            parser.add_option("-a", "--all", "--alldates",
                                action="store_true", dest="all_dates", 
                                default=False,
                                help="use this to show all todos, even those with deadline passed")
            parser.add_option("-t", "--today", action="store_true",
                                dest="list_today", default=False,
                                help="List only todos that ends today")

        parser = OptionParser(usage="%prog {}".format(command_name))
        if command_name == "add":
            add_update_args()
        if command_name == "update":
            update_args()
            add_update_args()
        if command_name == "list":
            list_args()

        parser.add_option("-g", "--genre",
                            action="store", type="string", dest="genre",
                            help="Type of todo entry ; may be book, film, \
                            program, market... whatever !")
        parser.add_option("-D", "--done",
                            action="store_true", dest="done", default=False,
                            help="use this option if the thing to do was done")
        parser.add_option("-U", "--undone",
                            action="store_false", dest="done", default=False,
                            help="use this opt if the thing needs to be done")
        parser.add_option("--database",
                            action="store", type="string", dest="database",
                            help="use alternate database")

        (options,args) = parser.parse_args(args)
       
        return options, args
 
    def process_userinput(ui):
        def _check_date(val):
            msg = "Date must be in format [[[YY]YY]MM]DD[-hh[mm[ss]]] ; deadline default to today 23:59:59"
            try:
                year = int(datetime.date.today().year)
                nextyear = int(datetime.date.today().year + 1)
                month = int(datetime.date.today().month)
                nextmonth = int(datetime.date.today().month + 1)

                if len(val) == 2:                     # format DD
                    if int(datetime.date.today().day) > int(val[0:]) and \
                                datetime.date.today().month == "12":
                        val = datetime.datetime(
                            nextyear, 1, int(val[0:]), 23, 59, 59)
                    elif int(datetime.date.today().day) > int(val[0:]):
                        val = datetime.datetime(
                            year, nextmonth, int(val[0:]), 23, 59, 59)
                    else:
                        val = datetime.datetime(
                            year, month, int(val[0:]), 23, 59, 59)
                    return val
                if len(val) == 4:                     # format MMDD
                    if int(datetime.date.today().day) >= int(val[2:]) and\
                            int(datetime.date.today().month) == int(val[0:2]):
                        val = datetime.datetime(
                            nextyear, int(val[0:2]), int(val[2:]), 23, 59, 59)
                    else:
                        val = datetime.datetime(
                            year, int(val[0:2]), int(val[2:]), 23, 59, 59)
                    return val
                if len(val) == 6:                     # format YYMMDD
                    val = datetime.datetime(
                        int("20" + val[0:2]),int(val[2:4]),int(val[4:]),23,59,59)
                    return val
                elif len(val) == 8:                   # format YYYYMMDD
                    val = datetime.datetime(
                        int(val[0:4]),int(val[4:6]),int(val[6:]),23,59,59)
                    return val
                elif len(val) == 9 and val[6] == "-": # format YYMMDD-hh
                    val = datetime.datetime(
                        int("20" + val[0:2]),int(val[2:4]),int(val[4:6]),
                        int(val[7:]),59,59)
                    return val
                elif len(val) == 11 and val[6] == "-": # format YYMMDD-hhmm
                    val = datetime.datetime(
                        int("20" + val[0:2]),int(val[2:4]),int(val[4:6]),
                        int(val[7:9]),int(val[9:]),59)
                    return val
                elif len(val) == 13 and val[6] == "-": # format YYMMDD-hhmmss
                    val = datetime.datetime(
                        int("20" + val[0:2]),int(val[2:4]),int(val[4:6]),
                        int(val[7:9]),int(val[9:11]),int(val[11:]))
                    return val
                elif len(val) == 11 and val[8] == "-": # format YYYYMMDD-hh
                    val = datetime.datetime(
                        int(val[0:4]),int(val[4:6]),int(val[6:8]),
                        int(val[9:]),59,59)
                    return val
                elif len(val) == 13 and val[8] == "-": # format YYYYMMDD-hhmm
                    val = datetime.datetime(
                        int(val[0:4]),int(val[4:6]),int(val[6:8]),
                        int(val[9:11]),int(val[11:]),59)
                    return val
                elif len(val) == 15 and val[8] == "-": # format YYYYMMDD-hhmmss
                    val = datetime.datetime(
                        int(val[0:4]),int(val[4:6]),int(val[6:8]),
                        int(val[9:11]),int(val[11:13]),int(val[13:]))
                    return val
                else:
                    print(msg)
                    return
            except TypeError:
                return val
            except ValueError:
                print(msg)
                return

        def _decode_utf(val):
            if val is None:
                return
            else:
                return val.decode("utf_8")

        try:
            if ui.deadline:
                ui.deadline = _check_date(ui.deadline)
        except AttributeError:
            pass
        try:
            if ui.genre:
                ui.genre = _decode_utf(ui.genre)
        except AttributeError:
            pass
        try:
            if ui.subject:
                ui.subject = _decode_utf(ui.subject)
        except AttributeError:
            pass
        try:
            if ui.text:
                ui.text = _decode_utf(ui.text)
        except AttributeError:
            pass
        try:
            if ui.id_entry:
                ui.id_entry = int(ui.id_entry)
        except AttributeError:
            pass
            
        return ui


    #
    # start prog
    #
    # verify if command_name exists and is correct ; exit on error
    try:
        command_name = sys.argv[1]
        commands = {
            "add": AddTodoCommand,
            "list": ListTodoCommand,
            "update": UpdateTodoCommand
            }
        try:
            Command = commands[command_name]
        except KeyError:
            print("usage : todolist command [add, update, list]")
            sys.exit(16)
        cmd = Command()
    except IndexError:
        print("usage : todolist command [add, update, list]")
        sys.exit(15)
    args = sys.argv[2:]

    #
    # Start parsing args
    #
    (options, args) = parse_args(command_name, args)
    options = process_userinput(options)

    #
    # Start sql engine
    #
    if options.database:
        database_location = options.database
    else:
        database_location = os.path.join(os.path.expanduser("~") + "/.todotest.sql")
    engine = create_engine("sqlite:///{}".format(database_location),
                                 echo=False, convert_unicode=True)
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()


    # run command
    cmd.run(session, options)
