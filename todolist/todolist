#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# todolist.py
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 0AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# Franck Labadille
#

"""
todolist.py return a string with :
deadline ; subject of todo ; details ; (genre?) ;

"""
import pdb

import datetime
import os
import sys

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Table, Column, Integer, String, Date, DateTime, Boolean

from optparse import OptionParser



database_location = os.path.join(os.path.expanduser("~") + ".todolist.sql")
Base = declarative_base()

engine = create_engine("sqlite:///{}".format(database_location),
                                 echo=False, convert_unicode=True)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()


now = datetime.datetime.now()
today = datetime.datetime.today()
default_genre="any"


class Todo(Base):
    __tablename__ = "todo"
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=now) # datetime data enters in
    deadline = Column(Date, default=today)
    genre = Column(String, default="")
    subject = Column(String, default="")
    detail = Column(String, default="")
    done = Column(Boolean, default=False)

    def __init__(self, data):
        """ data is dictionnary issued by optparsing user entry """
        self.timestamp = now
        self.deadline = data["deadline"]
        self.genre = data["genre"]
        self.subject = data["subject"]
        self.detail = data["detail"]
        self.done = data["done"]

    def __repr__(self):
        return """<Todo('{}','{}','{}','{}','{}','{}')>
                """.format(self.timestamp, self.deadline, self.genre,
                        self.subject, self.detail, self.done)

        
class AddTodoCommand:
    """
        Adding new todo in database
    """
    command_name = "add"

    def run(self, options):
        def decode_utf(val):
            if val is None:
                return
            else:
                return val.decode("utf_8")

        values = {
            "deadline": options.deadline,
            "genre": decode_utf(options.genre),
            "subject": decode_utf(options.subject),
            "detail": decode_utf(options.detail),
            "done": options.done
            }
        pdb.set_trace()
        try:
            new_entry = Todo(**values)
            session.add(new_entry)
            session.commit()
            return True
        except sqlalchemy.exc.IntegrityError:
            return False

class ListTodoCommand:
    pass

class UpdateTodoCommand:
    pass


if __name__ == "__main__":


    def parse_args(command_name, args):
        parser = OptionParser(usage="%prog {}".format(command_name))

        parser.add_option("-e", "--endline", "--deadline",
                            action="store", type="string", dest="deadline",
                            default=today,
                            help="Date of deadline ; format to YYMMDD")
        parser.add_option("-g", "--genre",
                            action="store", type="string", dest="genre",
                            default=default_genre,
                            help="Type of todo entry ; may be book, film, \
                            program, market... whatever !")
        parser.add_option("-s", "--subject",
                            action="store", type="string", dest="subject",
                            help="Resume of the thing to do")
        parser.add_option("-t", "--text", "--detail",
                            action="store", type="string", dest="detail",
                            help="Detailled explication of the thing to do")
        parser.add_option("-i", "--id",
                            action="store", type="string", dest="id_entry",
                            help="id of entry you want to handle with")
        parser.add_option("-d", "--done",
                            action="store_true", dest="done", default=False,
                            help="use this option if the thing to do was done")
        parser.add_option("-u", "--undone",
                            action="store_false", dest="done", default=True,
                            help="use this opt if the thing needs to be done")
        parser.add_option("--database",
                            action="store", type="string", dest="database",
                            help="use alternate database")
        (options,args) = parser.parse_args(args)
       
        return options, args
 
    #
    # start prog
    #
    # verify if command_name exists and is correct ; exit on error
    try:
        command_name = sys.argv[1]
        commands = {
            "add": AddTodoCommand,
            "list": ListTodoCommand,
            "update": UpdateTodoCommand
            }
        try:
            Command = commands[command_name]
        except KeyError:
            print("usage : todolist command [add, update, list]")
            sys.exit(16)
        cmd = Command()
    except IndexError:
        print("usage : todolist command [add, update, list]")
        sys.exit(15)
    args = sys.argv[2:]

    
    # Start parsing args
    (options, args) = parse_args(command_name, args)
   
    # run command
    cmd.run(options)
